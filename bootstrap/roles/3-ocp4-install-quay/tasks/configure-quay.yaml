# Code attribution
# Some code from here - https://github.com/redhat-cop/rhel-edge-automation-arch/blob/main/ansible/roles/quay-raw-create-user/tasks/main.yaml

- name: extract quay hostname
  shell: |
    oc get route {{ quay_registry_name }}-quay -o jsonpath='{.spec.host}' -n {{ quay_project_name }}
  register: quay_hostname_result
  delay: 5
  retries: 10
  until:
    - quay_hostname_result.stdout != ""

- name: Set Quay hostname
  ansible.builtin.set_fact:
    quay_route: "{{ quay_hostname_result.stdout }}"

- name: Wait until Quay Application is Responding
  ansible.builtin.uri:
    return_content: yes
    status_code: 200
    url: "https://{{ quay_route }}"
    validate_certs: no
  delay: 10
  register: quay_check
  retries: 30
  until:
    quay_check.status == 200

- name: Initialize Quay User
  ansible.builtin.uri:
    body_format: json
    body:
      username: "{{ quay_admin_username }}"
      email: "{{ quay_admin_email }}"
      password: "{{ quay_admin_password }}"
      access_token: "true"
    headers:
      Content-Type: application/json
    method: POST
    url: "https://{{ quay_route }}/api/v1/user/initialize"
    validate_certs: no
  register: quay_init_response
  failed_when:
    - quay_init_response.status != 200
  ignore_errors: true

- name: Set Output Message from Quay on User Initalize
  ansible.builtin.set_fact:
    init_output_msg: "{{ quay_init_response.json.message|default('') }}"
  ignore_errors: true

- name: Use API Token to continue Creating
  block:

    - name: Set Quay Access Token
      ansible.builtin.set_fact:
        quay_access_token: "{{ quay_init_response.json.access_token }}"

    - name: Create Quay Organization
      ansible.builtin.uri:
        body_format: json
        body:
          name: "{{ quay_org_name }}"
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ quay_access_token }}"
        method: POST
        url: "https://{{ quay_route }}/api/v1/organization/"
        validate_certs: no
        status_code: "{{ quay_org_created_success_status_code }}"
      register: quay_org_response

    - name: Print quay_org_response
      debug:
        msg: "{{ quay_org_response }}"

#    - name: Create Repository
#      ansible.builtin.uri:
#        body_format: json
#        body:
#          repository: "{{ item }}"
#          namespace: "{{ quay_org_name }}"
#          repo_kind: "image"
#          visibility: "public"
#          description: "Repo for CICD"
#        headers:
#          Content-Type: application/json
#          Authorization: "Bearer {{ quay_access_token }}"
#        method: POST
#        url: "https://{{ quay_route }}/api/v1/repository"
#        validate_certs: no
#        status_code: "{{ quay_repo_created_success_status_code }}"
#      register: quay_repo_response
#
    - name: Create Robot Account
      ansible.builtin.uri:
        body_format: json
        body:
          description": "Robot Account for CICD "
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ quay_access_token }}"
        method: PUT
        url: "https://{{ quay_route }}/api/v1/organization/{{ quay_org_name }}/robots/{{ quay_robot_account }}"
        validate_certs: no
        status_code: "{{ quay_robot_created_success_status_code }}"
      register: quay_robot_response

    - name: Print quay_robot_response
      debug:
        msg: "{{ quay_robot_response }}"

    - name: Set Robot Token from Creating New Robot Account
      ansible.builtin.set_fact:
        quay_robot_token: "{{ quay_robot_response.json.token }}"

#    - name: Add Robot account permissions to repo
#      ansible.builtin.uri:
#        body_format: json
#        body:
#          role: "admin"
#        headers:
#          Content-Type: application/json
#          Authorization: "Bearer {{ quay_access_token }}"
#        method: PUT
#        url: "https://{{ quay_route }}/api/v1/repository/{{ quay_org_name }}/{{ item }}/permissions/user/{{ quay_org_name }}+{{ quay_robot_account }}"
#        validate_certs: no
#        status_code: "{{ quay_perm_success_status_code }}"
#      register: quay_perm_response
#
#    - name: Print quay_perm_response
#      debug:
#        msg: "{{ quay_perm_response }}"

##Create Quay Secret so other roles can use
#- name: Create Quay Secret in Namespaces that require secret
#  shell: |
#    oc create secret docker-registry "{{ quay_secret_name }}" --docker-server="{{ quay_route }}" --docker-username="{{ quay_admin_username }}+{{ quay_robot_account }}" --docker-password="{{ quay_robot_token }}" --docker-email="" -n "{{ item }}"
#  loop: "{{ secret_required_namespaces }}"
#
#- name: Confirm Quay Secret is Created
#  kubernetes.core.k8s:
#    state: present
#    api_version: v1
#    kind: Secret
#    namespace: "{{ item }}"
#    name: "{{ quay_secret_name }}"
#    wait: yes
#  loop: "{{ secret_required_namespaces }}"
