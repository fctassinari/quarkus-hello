---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
  name: ${SONAR_DATABASE_SERVICE_NAME}
stringData:
  database-name: ${SONAR_POSTGRESQL_DATABASE}
  database-password: ${SONAR_POSTGRESQL_PASSWORD}
  database-user: ${SONAR_POSTGRESQL_USER}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  name: ${SONAR_DATABASE_SERVICE_NAME}
spec:
  ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: ${SONAR_DATABASE_SERVICE_NAME}
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${SONAR_DATABASE_SERVICE_NAME}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: ${SONAR_SONAR_VOLUME_CAPACITY}
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  name: ${SONAR_DATABASE_SERVICE_NAME}
spec:
  replicas: 1
  selector:
    name: ${SONAR_DATABASE_SERVICE_NAME}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: ${SONAR_DATABASE_SERVICE_NAME}
    spec:
      containers:
        - capabilities: {}
          env:
            - name: SONAR_POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${SONAR_DATABASE_SERVICE_NAME}
            - name: SONAR_POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${SONAR_DATABASE_SERVICE_NAME}
            - name: SONAR_POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${SONAR_DATABASE_SERVICE_NAME}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: postgresql
          ports:
            - containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${SONAR_MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${SONAR_DATABASE_SERVICE_NAME}-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
        - name: ${SONAR_DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${SONAR_DATABASE_SERVICE_NAME}
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${SONAR_POSTGRESQL_VERSION}
          namespace: ${SONAR_NAMESPACE}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
status: {}

