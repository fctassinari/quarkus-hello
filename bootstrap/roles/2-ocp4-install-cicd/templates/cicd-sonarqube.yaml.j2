---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-sonarq-postgres-data
  namespace: "{{ sonarq_namespace }}"
  labels:
    app: sonarq
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: Service
apiVersion: v1
metadata:
  annotations:
    description: Exposes the database server
  name: sonarq-postgresql
  namespace: "{{ sonarq_namespace }}"
  labels:
    app: sonarq
spec:
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
  selector:
    name: sonarq-postgresql
---
kind: DeploymentConfig
apiVersion: v1
metadata:
  annotations:
    description: Defines how to deploy the database
  name: sonarq-postgresql
  namespace: "{{ sonarq_namespace }}"
  labels:
    app: sonarq
spec:
  replicas: 1
  selector:
    name: sonarq-postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: sonarq-postgresql
      name: sonarq-postgresql
    spec:
      containers:
        - env:
            - name: POSTGRESQL_USER
              value: sonarq
            - name: POSTGRESQL_PASSWORD
              value: sonarq
            - name: POSTGRESQL_DATABASE
              value: sonarq
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: "100"
            - name: POSTGRESQL_SHARED_BUFFERS
              value: 12MB
            - name: POSTGRESQL_ADMIN_PASSWORD
              value: sonarq
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 20
          name: postgresql
          ports:
            - containerPort: 5432
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U sonarq -q -d sonarq -c 'SELECT 1'
            initialDelaySeconds: 30
            timeoutSeconds: 1
            failureThreshold: 10
          resources:
            limits:
              memory: 512Mi
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: sonarq-postgres-data
      volumes:
        - name: sonarq-postgres-data
          persistentVolumeClaim:
            claimName: pvc-sonarq-postgres-data
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:12-el8
          namespace: openshift
      type: ImageChange
    - type: ConfigChange

#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: sonarqube
#  namespace: "{{ sonar_namespace }}"
#  labels:
#    app: sonarqube
#    app.kubernetes.io/component: sonarqube
#    app.kubernetes.io/instance: sonarqube
#    app.kubernetes.io/name: sonarqube
#    app.kubernetes.io/part-of: sonarqube
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: sonarqube
#      name: sonarqube
#  template:
#    metadata:
#      labels:
#        app: sonarqube
#        name: sonarqube
#    spec:
#      containers:
#        - name: sonarqube
#          imagePullPolicy: Always
#          image: sonarqube:9.9.7-community
#          ports:
#            - containerPort: 9000
#              protocol: TCP
#          volumeMounts:
#            - mountPath: /opt/sq/temp
#              name: sonarqube-temp
#            - mountPath: /opt/sq/conf
#              name: sonarqube-conf
#            - mountPath: /opt/sq/data
#              name: sonarqube-data
#            - mountPath: /opt/sq/extensions
#              name: sonarqube-extensions
#            - mountPath: /opt/sq/logs
#              name: sonarqube-logs
#          livenessProbe:
#            failureThreshold: 10
#            httpGet:
#              path: /
#              port: 9000
#              scheme: HTTP
#            initialDelaySeconds: 45
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#          readinessProbe:
#            failureThreshold: 10
#            httpGet:
#              path: /
#              port: 9000
#              scheme: HTTP
#            initialDelaySeconds: 10
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#          resources:
#            limits:
#              cpu: "1"
#              memory: 4Gi
#            requests:
#              cpu: 200m
#              memory: 512Mi
#      volumes:
#        - name: sonarqube-temp
#          emptyDir: {}
#        - name: sonarqube-conf
#          emptyDir: {}
#        - name: sonarqube-data
#          emptyDir: {}
#        - name: sonarqube-extensions
#          emptyDir: {}
#        - name: sonarqube-logs
#          emptyDir: {}
#---
#apiVersion: route.openshift.io/v1
#kind: Route
#metadata:
#  labels:
#    app: sonarqube
#  name: sonarqube
#  namespace: "{{ sonar_namespace }}"
#spec:
#  port:
#    targetPort: 9000-tcp
#  tls:
#    termination: edge
#  to:
#    kind: Service
#    name: sonarqube
#    weight: 100
#  wildcardPolicy: None
#---
#apiVersion: v1
#kind: Service
#metadata:
#  labels:
#    app: sonarqube
#  name: sonarqube
#  namespace: "{{ sonar_namespace }}"
#spec:
#  ports:
#    - name: 9000-tcp
#      port: 9000
#      protocol: TCP
#      targetPort: 9000
#  selector:
#    app: sonarqube
#    name: sonarqube
#  type: ClusterIP
#---
#
#
#
#
