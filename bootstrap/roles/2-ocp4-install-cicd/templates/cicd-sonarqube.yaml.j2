---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
  name: ${sonar_database_service_name}
  namespace: ${sonar_namespace}
stringData:
  database-name: ${sonar_postgresql_database}
  database-password: ${sonar_postgresql_password}
  database-user: ${sonar_postgresql_user}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  name: ${sonar_database_service_name}
  namespace: ${sonar_namespace}
spec:
  ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: ${sonar_database_service_name}
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${sonar_database_service_name}
  namespace: ${sonar_namespace}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: ${SONAR_sonar_volume_capacity}
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  name: ${sonar_database_service_name}
  namespace: ${sonar_namespace}
spec:
  replicas: 1
  selector:
    name: ${sonar_database_service_name}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: ${sonar_database_service_name}
    spec:
      containers:
        - capabilities: {}
          env:
            - name: sonar_postgresql_user
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${sonar_database_service_name}
            - name: sonar_postgresql_password
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${sonar_database_service_name}
            - name: sonar_postgresql_database
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${sonar_database_service_name}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: postgresql
          ports:
            - containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${sonar_memory_limit}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: ${sonar_database_service_name}-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
        - name: ${sonar_database_service_name}-data
          persistentVolumeClaim:
            claimName: ${sonar_database_service_name}
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${sonar_postgresql_version}
          namespace: ${sonar_namespace}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
status: {}

#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: sonarqube
#  namespace: "{{ sonar_namespace }}"
#  labels:
#    app: sonarqube
#    app.kubernetes.io/component: sonarqube
#    app.kubernetes.io/instance: sonarqube
#    app.kubernetes.io/name: sonarqube
#    app.kubernetes.io/part-of: sonarqube
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: sonarqube
#      name: sonarqube
#  template:
#    metadata:
#      labels:
#        app: sonarqube
#        name: sonarqube
#    spec:
#      containers:
#        - name: sonarqube
#          imagePullPolicy: Always
#          image: sonarqube:9.9.7-community
#          ports:
#            - containerPort: 9000
#              protocol: TCP
#          volumeMounts:
#            - mountPath: /opt/sq/temp
#              name: sonarqube-temp
#            - mountPath: /opt/sq/conf
#              name: sonarqube-conf
#            - mountPath: /opt/sq/data
#              name: sonarqube-data
#            - mountPath: /opt/sq/extensions
#              name: sonarqube-extensions
#            - mountPath: /opt/sq/logs
#              name: sonarqube-logs
#          livenessProbe:
#            failureThreshold: 10
#            httpGet:
#              path: /
#              port: 9000
#              scheme: HTTP
#            initialDelaySeconds: 45
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#          readinessProbe:
#            failureThreshold: 10
#            httpGet:
#              path: /
#              port: 9000
#              scheme: HTTP
#            initialDelaySeconds: 10
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#          resources:
#            limits:
#              cpu: "1"
#              memory: 4Gi
#            requests:
#              cpu: 200m
#              memory: 512Mi
#      volumes:
#        - name: sonarqube-temp
#          emptyDir: {}
#        - name: sonarqube-conf
#          emptyDir: {}
#        - name: sonarqube-data
#          emptyDir: {}
#        - name: sonarqube-extensions
#          emptyDir: {}
#        - name: sonarqube-logs
#          emptyDir: {}
#---
#apiVersion: route.openshift.io/v1
#kind: Route
#metadata:
#  labels:
#    app: sonarqube
#  name: sonarqube
#  namespace: "{{ sonar_namespace }}"
#spec:
#  port:
#    targetPort: 9000-tcp
#  tls:
#    termination: edge
#  to:
#    kind: Service
#    name: sonarqube
#    weight: 100
#  wildcardPolicy: None
#---
#apiVersion: v1
#kind: Service
#metadata:
#  labels:
#    app: sonarqube
#  name: sonarqube
#  namespace: "{{ sonar_namespace }}"
#spec:
#  ports:
#    - name: 9000-tcp
#      port: 9000
#      protocol: TCP
#      targetPort: 9000
#  selector:
#    app: sonarqube
#    name: sonarqube
#  type: ClusterIP
#---
#
#
#
#
