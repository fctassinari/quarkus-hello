---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
  labels:
    app: sonarqube
  name: "{{ sonar_database_service_name }}"
  namespace: "{{ sonar_namespace }}"
stringData:
  database-name: "{{ sonar_postgresql_database }}"
  database-password: "{{ sonar_postgresql_password }}"
  database-user: "{{ sonar_postgresql_user }}"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: sonarqube
  name: "{{ sonar_database_service_name }}"
  namespace: "{{ sonar_namespace }}"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "{{ sonar_volume_capacity }}"
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  labels:
    app: sonarqube
  name: "{{ sonar_database_service_name }}"
  namespace: "{{ sonar_namespace }}"
spec:
  ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: "{{ sonar_database_service_name }}"
  sessionAffinity: None
  type: ClusterIP
---
kind: DeploymentConfig
apiVersion: v1
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  name: "{{ sonar_database_service_name }}"
  namespace: "{{ sonar_namespace }}"
  labels:
    app: sonarqube
spec:
  replicas: 1
  selector:
    name: {{ sonar_database_service_name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: {{ sonar_database_service_name }}
    spec:
      containers:
        - capabilities: {}
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: {{ sonar_database_service_name }}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: {{ sonar_database_service_name }}
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: {{ sonar_database_service_name }}
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: "100"
            - name: POSTGRESQL_SHARED_BUFFERS
              value: 12MB
            - name: POSTGRESQL_ADMIN_PASSWORD
              value: sonar
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 20
          name: postgresql
          ports:
            - containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U sonar -q -d sonar-db -c 'SELECT 1'
            initialDelaySeconds: 30
            timeoutSeconds: 1
            failureThreshold: 10
          resources:
            limits:
              memory: {{ sonar_memory_limit }}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
            - name: {{ sonar_database_service_name }}-data
              mountPath: /var/lib/pgsql/data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
        - name: {{ sonar_database_service_name }}-data
          persistentVolumeClaim:
            claimName: {{ sonar_database_service_name }}
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:{{ sonar_postgresql_version }}
          namespace: openshift
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange

#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: sonarube
#  namespace: "{{ sonar_namespace }}"
#  labels:
#    app: sonarube
#    app.kubernetes.io/component: sonarube
#    app.kubernetes.io/instance: sonarube
#    app.kubernetes.io/name: sonarube
#    app.kubernetes.io/part-of: sonarube
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: sonarube
#      name: sonarube
#  template:
#    metadata:
#      labels:
#        app: sonarube
#        name: sonarube
#    spec:
#      containers:
#        - name: sonarube
#          imagePullPolicy: Always
#          image: sonarube:9.9.7-community
#          ports:
#            - containerPort: 9000
#              protocol: TCP
#          volumeMounts:
#            - mountPath: /opt/sq/temp
#              name: sonarube-temp
#            - mountPath: /opt/sq/conf
#              name: sonarube-conf
#            - mountPath: /opt/sq/data
#              name: sonarube-data
#            - mountPath: /opt/sq/extensions
#              name: sonarube-extensions
#            - mountPath: /opt/sq/logs
#              name: sonarube-logs
#          livenessProbe:
#            failureThreshold: 10
#            httpGet:
#              path: /
#              port: 9000
#              scheme: HTTP
#            initialDelaySeconds: 45
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#          readinessProbe:
#            failureThreshold: 10
#            httpGet:
#              path: /
#              port: 9000
#              scheme: HTTP
#            initialDelaySeconds: 10
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 1
#          resources:
#            limits:
#              cpu: "1"
#              memory: 4Gi
#            requests:
#              cpu: 200m
#              memory: 512Mi
#      volumes:
#        - name: sonarube-temp
#          emptyDir: {}
#        - name: sonarube-conf
#          emptyDir: {}
#        - name: sonarube-data
#          emptyDir: {}
#        - name: sonarube-extensions
#          emptyDir: {}
#        - name: sonarube-logs
#          emptyDir: {}
#---
#apiVersion: route.openshift.io/v1
#kind: Route
#metadata:
#  labels:
#    app: sonarube
#  name: sonarube
#  namespace: "{{ sonar_namespace }}"
#spec:
#  port:
#    targetPort: 9000-tcp
#  tls:
#    termination: edge
#  to:
#    kind: Service
#    name: sonarube
#    weight: 100
#  wildcardPolicy: None
#---
#apiVersion: v1
#kind: Service
#metadata:
#  labels:
#    app: sonarube
#  name: sonarube
#  namespace: "{{ sonar_namespace }}"
#spec:
#  ports:
#    - name: 9000-tcp
#      port: 9000
#      protocol: TCP
#      targetPort: 9000
#  selector:
#    app: sonarube
#    name: sonarube
#  type: ClusterIP
#---
#
#
#
#
