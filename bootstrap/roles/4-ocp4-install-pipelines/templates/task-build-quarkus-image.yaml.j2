apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-quarkus-image
  namespace: "{{ pipeline_namespace }}"
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: deploy
    tekton.dev/displayName: "Build Quarkus"
spec:
  description: >-
    This task build a Quarkus application
  params:
    - description: Location of the repo where image has to be pushed
      name: IMAGE
      type: string
    - default: registry.redhat.io/ubi9/openjdk-21:1.21-3
      description: The java imagestream
      name: JAVA_IMAGE
      type: string
    - default: registry.redhat.io/rhel8/buildah@sha256:5c7cd7c9a3d49e8905fc98693f6da605aeafae36bde5622dc78e12f31db3cd59
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: "true"
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: "false"
      description: Skip pushing the built image
      name: SKIP_PUSH
      type: string



#
#    - default: .
#      description: The location of the path to run s2i from
#      name: PATH_CONTEXT
#      type: string
#    - default: ""
#      description: Additional Maven arguments
#      name: MAVEN_ARGS_APPEND
#      type: string
#    - default: "false"
#      description: Remove the Maven repository after the artifact is built
#      name: MAVEN_CLEAR_REPO
#      type: string
#    - default: ""
#      description: The base URL of a mirror used for retrieving artifacts
#      name: MAVEN_MIRROR_URL
#      type: string
#    - default: []
#      description: Environment variables to set during _build-time_.
#      name: ENV_VARS
#      type: array
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
  steps:
#    - args:
#        - $(params.ENV_VARS[*])
#      env:
#        - name: HOME
#          value: /tekton/home
#      image: registry.redhat.io/source-to-image/source-to-image-rhel8@sha256:6a6025914296a62fdf2092c3a40011bd9b966a6806b094d51eec5e1bd5026ef4
#      name: generate
#      resources: {}
#      script: |
#        echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > /env-vars/env-file
#
#        [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
#          echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> /env-vars/env-file
#
#        [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
#          echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> /env-vars/env-file
#
#        echo "Processing Build Environment Variables"
#        for var in "$@"
#        do
#          echo "$var" >> /env-vars/env-file
#        done
#
#        s2i build $(params.PATH_CONTEXT) image-registry.openshift-image-registry.svc:5000/openshift/java:$(params.JAVA_IMAGE) \
#        --image-scripts-url image:///usr/local/s2i \
#        --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-vars/env-file
#      volumeMounts:
#        - mountPath: /gen-source
#          name: gen-source
#        - mountPath: /env-vars
#          name: env-vars
#      workingDir: $(workspaces.source.path)

    - image: $(params.BUILDER_IMAGE)
      name: build-and-push
      resources: {}
      script: |
        container=$(buildah from $(params.JAVA_IMAGE))
        buildah copy $container $(workspaces.source.path)/source/target/quarkus-app/lib/ /deployments/lib/
        buildah copy $container $(workspaces.source.path)/source/target/quarkus-app/*.jar /deployments/
        buildah copy $container $(workspaces.source.path)/source/target/quarkus-app/app/ /deployments/app/
        buildah copy $container $(workspaces.source.path)/source/target/quarkus-app/quarkus/ /deployments/quarkus/
        
        buildah config --env JAVA_OPTS_APPEND="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager" $container
        buildah config --env JAVA_APP_JAR="/deployments/quarkus-run.jar" $container
        
        buildah config --entrypoint "/opt/jboss/container/java/run/run-java.sh" $container

        buildah commit $container $(params.IMAGE)

#        buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
#           --layers -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .
        
        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0
                
#        [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
                
        buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)
        
        cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
      securityContext:
        capabilities:
          add:
            - SETFCAP
#      volumeMounts:
#        - mountPath: /var/lib/containers
#          name: varlibcontainers
#        - mountPath: /gen-source
#          name: gen-source
#      workingDir: /gen-source
#  volumes:
#    - emptyDir: {}
#      name: varlibcontainers
#    - emptyDir: {}
#      name: gen-source
#    - emptyDir: {}
#      name: env-vars
  workspaces:
    - mountPath: /workspace/source
      name: source
#    - description: An optional workspace that allows providing a .docker/config.json
#        file for Buildah to access the container registry. The file should be placed
#        at the root of the Workspace with name config.json.
#      name: dockerconfig
#      optional: true
