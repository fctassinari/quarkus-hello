---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: allow-anyuid-to-git
  namespace: "{{ gogs_namespace }}"
subjects:
  - kind: ServiceAccount
    name: git
    namespace: "{{ gogs_namespace }}"
roleRef:
  kind: ClusterRole
  name: system:openshift:scc:anyuid
  apiGroup: rbac.authorization.k8s.io
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-gogs-data
  namespace: "{{ gogs_namespace }}"
  labels:
    app: gogs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-gogs-postgres-data
  namespace: "{{ gogs_namespace }}"
  labels:
    app: gogs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: ServiceAccount
apiVersion: v1
metadata:
  creationTimestamp: null
  labels:
    app: gogs
  name: git
  namespace: "{{ gogs_namespace }}"
---
kind: Service
apiVersion: v1
metadata:
  annotations:
    description: Exposes the database server
  name: gogs-postgresql
  namespace: "{{ gogs_namespace }}"
  labels:
    app: gogs
spec:
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
  selector:
    name: gogs-postgresql
---
kind: DeploymentConfig
apiVersion: v1
metadata:
  annotations:
    description: Defines how to deploy the database
  name: gogs-postgresql
  namespace: "{{ gogs_namespace }}"
  labels:
    app: gogs
spec:
  replicas: 1
  selector:
    name: gogs-postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: gogs-postgresql
      name: gogs-postgresql
    spec:
      containers:
        - env:
            - name: POSTGRESQL_USER
              value: gogs
            - name: POSTGRESQL_PASSWORD
              value: gogs
            - name: POSTGRESQL_DATABASE
              value: gogs
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: "100"
            - name: POSTGRESQL_SHARED_BUFFERS
              value: 12MB
            - name: POSTGRESQL_ADMIN_PASSWORD
              value: gogs
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 20
          name: postgresql
          ports:
            - containerPort: 5432
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U gogs -q -d gogs -c 'SELECT 1'
            initialDelaySeconds: 30
            timeoutSeconds: 1
            failureThreshold: 10
          resources:
            limits:
              memory: 512Mi
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: gogs-postgres-data
      volumes:
        - name: gogs-postgres-data
          persistentVolumeClaim:
            claimName: pvc-gogs-postgres-data
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:12-el8
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
---
kind: ImageStream
apiVersion: v1
metadata:
  labels:
    app: gogs
  name: gogs
  namespace: "{{ gogs_namespace }}"
spec:
  tags:
    - name: latest
      from:
        kind: DockerImage
        name: docker.io/gogs/gogs:latest
      importPolicy: {}
      annotations:
        description: The Gogs git server docker image
        tags: gogs,go,golang
        version: latest
---
kind: Service
apiVersion: v1
metadata:
  annotations:
    description: The Gogs server's http port
    service.alpha.HOSTNAME/dependencies: '[{"name":"gogs","namespace":"","kind":"Service"}]'
  labels:
    app: gogs
  name: gogs
  namespace: "{{ gogs_namespace }}"
spec:
  ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: gogs
    deploymentconfig: gogs
  sessionAffinity: None
  type: ClusterIP
---
kind: DeploymentConfig
apiVersion: v1
metadata:
  labels:
    app: gogs
  name: gogs
  namespace: "{{ gogs_namespace }}"
spec:
  replicas: 1
  selector:
    app: gogs
    deploymentconfig: gogs
  strategy:
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gogs
        deploymentconfig: gogs
    spec:
      serviceAccountName: git
      containers:
        - image: " "
          imagePullPolicy: Always
          name: gogs
          ports:
            - containerPort: 3000
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
            - name: vl-gogs-data
              mountPath: /data
            - name: vl-gogs-config
              mountPath: /data/gogs/conf
          readinessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 40
            timeoutSeconds: 1
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 10
          livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 40
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: vl-gogs-data
          persistentVolumeClaim:
            claimName: pvc-gogs-data
        - name: vl-gogs-config
          configMap:
            name: cm-gogs-config
            items:
              - key: app.ini
                path: app.ini
  test: false
  triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
          - gogs
        from:
          kind: ImageStreamTag
          name: gogs:latest
      type: ImageChange
---
kind: Route
apiVersion: route.openshift.io/v1
id: gogs-http
metadata:
  labels:
    app: gogs
  name: gogs
  namespace: "{{ gogs_namespace }}"
spec:
  to:
    name: gogs
