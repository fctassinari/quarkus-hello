apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: init-gogs-
  namespace: {{ pipeline_namespace }}
spec:
  taskSpec:
    params:
      - name: GOGS_USER
        type: string
        description: Gogs admin username
        default: gogs
      - name: gogs_passwordWORD
        type: string
        description: Gogs admin password
        default: gogs
    stepTemplate:
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    steps:
      - name: init-gogs
        image: quay.io/siamaksade/python-oc
        script: |
          #!/usr/bin/env python3

          import os
          import requests
          
          fct_user = "fctassinari"
          fct_pass = "Ipc@Chip2024"
          
          gogs_user = "$(params.GOGS_USER)"
          gogs_pwd = "$(params.gogs_passwordWORD)"
          webhookURL = "http://" + os.popen('oc get route el-webhook -n {{ pipeline_namespace }} -o template --template="{{.spec.host}}"').read()
          gogsURL = "http://" + os.popen('oc get svc gogs -n gogs -o template --template="{{.spec.clusterIP}}"').read() + ":3000"
          
          
          ####################################################################
          # este bloco nao est√° funcionando
          # ex: curl -v -H "Content-Type: application/json" -H "Authorization: auth = (fct_user, fct_pass)" -d '{"user_name": "tassinari","password": "gogs","retype": "gogs","email": "admin@gogs.com","admin": "true"}' http://172.31.23.70:3000/user/sign_up
          #          create admin user
          #          data_user = {
          #          'user_name': gogs_user,
          #          'password': gogs_pwd,
          #          'retype': gogs_pwd,
          #          'email': 'admin@gogs.com'
          #          }
          #          print(gogsURL)
          #          resp = requests.post(url = gogsURL + "/user/sign_up", data = data_user)
          #
          #          if resp.status_code != 200:
          #            print("Error creating Gogs admin (status code: {})".format(resp.status_code))
          #            print(resp.content)
          #          else:
          #            print("Created admin user {}:{}".format(gogs_user, gogs_pwd))
          ####################################################################

          # create git repo quarkus-hello
          data_repo = '{"clone_addr": "https://github.com/fctassinari/quarkus-hello.git", "uid": 1, "repo_name": "quarkus-hello"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (fct_user, fct_pass), data = data_repo)

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo quarkus-hello")

          # configure webhook 
          data_webhook = '{"type": "gogs", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/" + gogs_user + "/quarkus-hello/hooks",
                              headers = headers,
                              auth = (gogs_user, gogs_pwd),
                              data = data_webhook)

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error configuring the webhook (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Configured webhook: " + webhookURL)

          # create git repo quarkus-hello-config
          data_repo = '{"clone_addr": "https://github.com/fctassinari/quarkus-hello-config.git", "uid": 1, "repo_name": "quarkus-hello-config"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo quarkus-hello-config")
