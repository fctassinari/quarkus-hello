### Gogs
- name: Get gogs route
  kubernetes.core.k8s_info:
    kind: Route
    api_version: route.openshift.io/v1
    namespace: "{{ gogs_namespace }}"
    name: gogs
  register: r_gogs_route
  retries: 10
  delay: 20
  until:
    - r_gogs_route.resources[0].spec.host is defined

- name: Create ArgoCD App project
  k8s:
    state: present
    definition: "{{ lookup('template', 'argocd-app-project.yaml.j2' )  }}"

- name: Create ArgoCD App
  k8s:
    state: present
    definition: "{{ lookup('template', 'argocd-app.yaml.j2' ) }}"

- name: Add Gitops Rolebinding
  k8s:
    state: present
    definition: "{{ lookup('template', 'rb-gitops.yaml.j2' ) }}"


### Pipeline
- name: Add RoleBinding to the pipeline namespace
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'rb-pipeline.yaml.j2') }}"

### Quay

- name: Extract quay hostname
  shell: |
    oc get route {{ quay_registry_name }}-quay -o jsonpath='{.spec.host}' -n {{ quay_namespace }}
  register: quay_hostname_result
  delay: 5
  retries: 10
  until:
    - quay_hostname_result.stdout != ""

- name: Set Quay hostname
  ansible.builtin.set_fact:
    quay_route: "{{ quay_hostname_result.stdout }}"

- name: Wait until Quay Application is Responding
  ansible.builtin.uri:
    return_content: yes
    status_code: 200
    url: "https://{{ quay_route }}"
    validate_certs: no
  delay: 10
  register: quay_check
  retries: 30
  until:
    quay_check.status == 200

- name: Use API Token to continue Creating
  block:

    - name: Create Repository
      ansible.builtin.uri:
        body_format: json
        body:
          repository: "{{ quay_repository }}"
          namespace: "{{ quay_org_name }}"
          repo_kind: "image"
          visibility: "public"
          description: "Repo for CICD"
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ quay_application_access_token }}"
        method: POST
        url: "https://{{ quay_route }}/api/v1/repository"
        validate_certs: no
        status_code: "{{ quay_repo_created_success_status_code }}"
      register: quay_repo_response

    - name: Add Robot account permissions to repo
      ansible.builtin.uri:
        body_format: json
        body:
          role: "admin"
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ quay_application_access_token }}"
        method: PUT
        url: "https://{{ quay_route }}/api/v1/repository/{{ quay_org_name }}/{{ quay_repository }}/permissions/user/{{ quay_org_name }}+{{ quay_robot_account }}"
        validate_certs: no
        status_code: "{{ quay_perm_success_status_code }}"
      register: quay_perm_response

- name: Create Quay Secret in Namespaces that require secret
  shell: |
    oc create secret docker-registry "{{ quay_secret_name }}" --docker-server="{{ quay_route }}" --docker-username="{{ quay_org_name }}+{{ quay_robot_account }}" --docker-password="{{ quay_robot_token }}" --docker-email="" -n "{{ app_namespace }}"
    oc secrets link pipeline "{{ quay_secret_name }}" --for=pull,mount -n "{{ app_namespace }}"

- name: Create Pipeline PVC
  k8s:
    state: present
    definition: "{{ lookup('template', 'pvc-pipeline-build.yaml.j2' ) }}"
  loop:
    - "{{ app_namespace }}"

- name: Create Maven ConfigMap
  k8s:
    state: present
    definition: "{{ lookup('template', 'cm-maven.yaml.j2' ) }}"
  loop:
    - "{{ app_namespace }}"

# Qdo houver necessidade de configmap ou secrets, criar dentro deste arquivo, vide exemplo abaixo
#- name: Application ConfigMap
#  k8s:
#    state: present
#    definition: "{{ lookup('template', 'cm-<????>.yaml.j2' ) }}"

- name: Get argocd password
  kubernetes.core.k8s_info:
    kind: Secret
    api_version: /v1
    name: openshift-gitops-cluster
    namespace: openshift-gitops
  register: r_argopass

- name: debug
  debug:
    msg: "{{ r_argopass.resources[0].data['admin.password'] }}"

- name: Add CM for ArgoCD env in namespace
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'cm-argocd-env-pipeline-ns.yaml.j2') }}"

- name: Add Secrets for ArgoCD env in namespace
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'sct-argocd-env-pipeline-ns.yaml.j2') }}"

- name: Create OpenShift Objects for Openshift Pipeline Triggers
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
    - trigger-secret.yaml.j2
    - rt-trigger-eventlistener.yaml.j2
    - trigger.yaml.j2
    - trigger-eventlistener.yaml.j2
    - trigger-binding.yaml.j2
    - trigger-template.yaml.j2
