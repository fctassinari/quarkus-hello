apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    operator.tekton.dev/last-applied-hash: 4cf43c2f90f70377f40ada01609f187d68253ed852447633168d3e1ef9f8a8f0
    tekton.dev/categories: Image Build
    tekton.dev/displayName: jib maven
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le
    tekton.dev/tags: image-build
  creationTimestamp: "2024-12-13T05:08:23Z"
  generation: 1
  labels:
    app.kubernetes.io/version: "0.5"
    operator.tekton.dev/provider-type: community
  name: jib-maven
  ownerReferences:
  - apiVersion: operator.tekton.dev/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: TektonInstallerSet
    name: addon-custom-communityTask-2qtsc
    uid: e8c93a3d-1ba2-4fe2-92c9-fd57bdbd5c85
  resourceVersion: "53947"
  uid: 14dc0f7a-9f8f-49cb-bb6d-36c907569626
spec:
  description: |-
    This Task builds Java/Kotlin/Groovy/Scala source into a container image using Google's Jib tool.
    Jib works with Maven and Gradle projects, and this template is for Maven projects.
  params:
  - description: Name of the image to build
    name: IMAGE
    type: string
  - default: registry.redhat.io/ubi8/openjdk-17@sha256:af305e087061cbaa4107ce0b304a1ef987f6b54bae3f75bfd529cfd084cba9b5
    description: Maven base image
    name: MAVEN_IMAGE
    type: string
  - default: .
    description: The directory containing the app, relative to the source repository
      root
    name: DIRECTORY
    type: string
  - default: empty-dir-volume
    description: The name of the volume for caching Maven artifacts and base image
      layers
    name: CACHE
    type: string
  - default: "false"
    description: Whether to allow insecure registry
    name: INSECUREREGISTRY
    type: string
  - default: service-ca.crt
    description: CA cert file name for insecure registry service
    name: CACERTFILE
    type: string
  results:
  - description: Digest of the image just built.
    name: IMAGE_DIGEST
    type: string
  steps:
  - env:
    - name: HOME
      value: /workspace
    - name: DOCKER_CONFIG
      value: $(credentials.path)/.docker/
    image: $(params.MAVEN_IMAGE)
    name: build-and-push
    resources: {}
    script: |
      #!/bin/bash

      # Delete the truststore created on exit
      function cleanup {
        rm $(workspaces.source.path)/truststore.jks
      }

      certParams=""

      if [[ -f /tekton-custom-certs/$(params.CACERTFILE) ]]; then
        # create the truststore with existing certs available
        keytool -importkeystore -srckeystore $JAVA_HOME/lib/security/cacerts -srcstoretype JKS -destkeystore $(workspaces.source.path)/truststore.jks -storepass "changeit" -srcstorepass "changeit" > /tmp/logs 2>&1
        if [ $? -ne 0 ]; then
          cat /tmp/logs
          exit 1
        fi
        # add your certs to the new truststore created
        keytool -import -keystore $(workspaces.source.path)/truststore.jks -storepass "changeit" -file /tekton-custom-certs/$(params.CACERTFILE) -noprompt
        # pass truststore details to the mvn command
        certParams="-Djavax.net.ssl.trustStore=$(workspaces.source.path)/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit"
        # clean truststore on exit
        trap cleanup EXIT
      fi

      mvn -B \
        -Duser.home=$HOME \
        -Djib.allowInsecureRegistries=$(params.INSECUREREGISTRY) \
        -Djib.to.image=$(params.IMAGE) \
        $certParams \
        compile \
        com.google.cloud.tools:jib-maven-plugin:build
    volumeMounts:
    - mountPath: /workspace/.m2
      name: $(params.CACHE)
      subPath: m2-cache
    - mountPath: /workspace/.cache
      name: $(params.CACHE)
      subPath: jib-cache
    workingDir: $(workspaces.source.path)/$(params.DIRECTORY)
  - image: $(params.MAVEN_IMAGE)
    name: digest-to-results
    resources: {}
    script: cat $(workspaces.source.path)/$(params.DIRECTORY)/target/jib-image.digest
      | tee $(results.IMAGE_DIGEST.path)
  volumes:
  - emptyDir: {}
    name: empty-dir-volume
  workspaces:
  - name: source
  - mountPath: /tekton-custom-certs
    name: sslcertdir
    optional: true
