apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    operator.tekton.dev/last-applied-hash: f00e4f9a4113dcf3daf28d0d7251d24638621f3e0aebfd7594cefebdf30aa32f
    tekton.dev/displayName: s2i perl
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, perl, workspace
  creationTimestamp: "2024-12-13T05:08:23Z"
  generation: 1
  labels:
    app.kubernetes.io/version: "0.1"
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    operator.tekton.dev/provider-type: redhat
  name: s2i-perl-1-11-0
  ownerReferences:
  - apiVersion: operator.tekton.dev/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: TektonInstallerSet
    name: addon-versioned-Tasks-1.11-94wk8
    uid: eb9843ed-d1b7-40ec-b40e-9bc97008c20b
  resourceVersion: "53941"
  uid: 1e4887c0-81e4-42b8-80ac-c9a1cc1f0084
spec:
  description: s2i-perl task clones a Git repository and builds and pushes a container
    image using S2I and a Perl builder image.
  params:
  - default: latest
    description: The tag of perl imagestream for perl version
    name: VERSION
    type: string
  - default: .
    description: The location of the path to run s2i from.
    name: PATH_CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)
    name: TLSVERIFY
    type: string
  - description: Location of the repo where image has to be pushed
    name: IMAGE
    type: string
  - default: registry.redhat.io/rhel8/buildah@sha256:55f5c7d88c77e1ab5a2ab8e877172b2b66cb196e21f10dc45148470d0ee8bbae
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: "false"
    description: Skip pushing the built image
    name: SKIP_PUSH
    type: string
  - default: []
    description: Environment variables to set during _build-time_.
    name: ENV_VARS
    type: array
  results:
  - description: Digest of the image just built.
    name: IMAGE_DIGEST
    type: string
  steps:
  - args:
    - $(params.ENV_VARS[*])
    env:
    - name: HOME
      value: /tekton/home
    image: registry.redhat.io/source-to-image/source-to-image-rhel8@sha256:6a6025914296a62fdf2092c3a40011bd9b966a6806b094d51eec5e1bd5026ef4
    name: generate
    resources: {}
    script: |
      echo "Processing Build Environment Variables"
      echo "" > /env-vars/env-file
      for var in "$@"
      do
          echo "$var" >> /env-vars/env-file
      done

      s2i build $(params.PATH_CONTEXT) image-registry.openshift-image-registry.svc:5000/openshift/perl:$(params.VERSION) \
      --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-vars/env-file
    volumeMounts:
    - mountPath: /gen-source
      name: gen-source
    - mountPath: /env-vars
      name: env-vars
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: build-and-push
    resources: {}
    script: |
      buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
         --layers -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .

      [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0
      [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
      buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
        --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
        docker://$(params.IMAGE)

      cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
    securityContext:
      capabilities:
        add:
        - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /gen-source
      name: gen-source
    workingDir: /gen-source
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: gen-source
  - emptyDir: {}
    name: env-vars
  workspaces:
  - mountPath: /workspace/source
    name: source
  - description: An optional workspace that allows providing a .docker/config.json
      file for Buildah to access the container registry. The file should be placed
      at the root of the Workspace with name config.json.
    name: dockerconfig
    optional: true
